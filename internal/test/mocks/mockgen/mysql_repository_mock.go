// Code generated by MockGen. DO NOT EDIT.
// Source: ./mysql_repository.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDataBaseOperations is a mock of IDataBaseOperations interface.
type MockIDataBaseOperations struct {
	ctrl     *gomock.Controller
	recorder *MockIDataBaseOperationsMockRecorder
}

// MockIDataBaseOperationsMockRecorder is the mock recorder for MockIDataBaseOperations.
type MockIDataBaseOperationsMockRecorder struct {
	mock *MockIDataBaseOperations
}

// NewMockIDataBaseOperations creates a new mock instance.
func NewMockIDataBaseOperations(ctrl *gomock.Controller) *MockIDataBaseOperations {
	mock := &MockIDataBaseOperations{ctrl: ctrl}
	mock.recorder = &MockIDataBaseOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataBaseOperations) EXPECT() *MockIDataBaseOperationsMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockIDataBaseOperations) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockIDataBaseOperationsMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIDataBaseOperations)(nil).Exec), varargs...)
}

// Prepare mocks base method.
func (m *MockIDataBaseOperations) Prepare(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prepare", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockIDataBaseOperationsMockRecorder) Prepare(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIDataBaseOperations)(nil).Prepare), varargs...)
}

// Query mocks base method.
func (m *MockIDataBaseOperations) Query(query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIDataBaseOperationsMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDataBaseOperations)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockIDataBaseOperations) QueryRow(query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIDataBaseOperationsMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIDataBaseOperations)(nil).QueryRow), varargs...)
}
