// Code generated by MockGen. DO NOT EDIT.
// Source: ./product_repository.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	entities "github.com/eneassena10/go-api-estoque/internal/domain/product/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepository is a mock of IProductRepository interface.
type MockIProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepositoryMockRecorder
}

// MockIProductRepositoryMockRecorder is the mock recorder for MockIProductRepository.
type MockIProductRepositoryMockRecorder struct {
	mock *MockIProductRepository
}

// NewMockIProductRepository creates a new mock instance.
func NewMockIProductRepository(ctrl *gomock.Controller) *MockIProductRepository {
	mock := &MockIProductRepository{ctrl: ctrl}
	mock.recorder = &MockIProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepository) EXPECT() *MockIProductRepositoryMockRecorder {
	return m.recorder
}

// ProductDestroy mocks base method.
func (m *MockIProductRepository) ProductDestroy(product *entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductDestroy", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductDestroy indicates an expected call of ProductDestroy.
func (mr *MockIProductRepositoryMockRecorder) ProductDestroy(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDestroy", reflect.TypeOf((*MockIProductRepository)(nil).ProductDestroy), product)
}

// ProductFindAll mocks base method.
func (m *MockIProductRepository) ProductFindAll() *[]entities.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductFindAll")
	ret0, _ := ret[0].(*[]entities.Product)
	return ret0
}

// ProductFindAll indicates an expected call of ProductFindAll.
func (mr *MockIProductRepositoryMockRecorder) ProductFindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductFindAll", reflect.TypeOf((*MockIProductRepository)(nil).ProductFindAll))
}

// ProductFindByID mocks base method.
func (m *MockIProductRepository) ProductFindByID(product *entities.Product) *entities.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductFindByID", product)
	ret0, _ := ret[0].(*entities.Product)
	return ret0
}

// ProductFindByID indicates an expected call of ProductFindByID.
func (mr *MockIProductRepositoryMockRecorder) ProductFindByID(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductFindByID", reflect.TypeOf((*MockIProductRepository)(nil).ProductFindByID), product)
}

// ProductSave mocks base method.
func (m *MockIProductRepository) ProductSave(product *entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductSave", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductSave indicates an expected call of ProductSave.
func (mr *MockIProductRepositoryMockRecorder) ProductSave(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductSave", reflect.TypeOf((*MockIProductRepository)(nil).ProductSave), product)
}

// ProductUpdateCount mocks base method.
func (m *MockIProductRepository) ProductUpdateCount(product *entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductUpdateCount", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductUpdateCount indicates an expected call of ProductUpdateCount.
func (mr *MockIProductRepositoryMockRecorder) ProductUpdateCount(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductUpdateCount", reflect.TypeOf((*MockIProductRepository)(nil).ProductUpdateCount), product)
}
